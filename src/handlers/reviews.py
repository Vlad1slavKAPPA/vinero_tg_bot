from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from create_bot import db_connector
from keyboards.all_kb import review_kb, main_kb
from create_bot import bot
from messaging_exception.messaging import send_long_message
from aiogram.exceptions import TelegramBadRequest

reviews_router = Router()

class Reviews(StatesGroup):
    review_info = State()

@reviews_router.message(F.text == "üìñ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def show_user_kb(message = Message):
    await message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=main_kb(message.from_user.id)
            )

@reviews_router.message(F.text == "üìù –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤")
async def open_kb(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=review_kb())

@reviews_router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def start_review(message: Message, state: FSMContext):
    await message.answer("–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=None)
    await state.set_state(Reviews.review_info)

@reviews_router.message(Reviews.review_info)
async def add_review(message: Message, state: FSMContext):
    info = {
        'id_user': message.from_user.id,
        'id_chat': message.chat.id,
        'id_message': message.message_id,
        'datetime': datetime.now(),
        'title': message.text[:10] + "..."
    }
    await state.update_data(review_info = info)

    query = "INSERT INTO reviews (user_id, id_chat, id_message, datetime, title, check_in) VALUES (:id_user, :id_chat, :id_message, :datetime, :title, false)"
    try:
        await db_connector.execute_query(query, info)
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=review_kb())
        await state.clear()
    except Exception as e:
        await state.clear()
        print(f">>>>>>>>>>>>>>>> –û–®–ò–ë–ö–ê: {e}")
        try:
            await send_long_message(
                f"Exception reviews.py (line - 54) {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}"
            )
        except Exception as log_err:
            print(f"‚Äº –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {log_err}")
        
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –¥–æ–ª–∂–Ω–æ –¥–æ–π—Ç–∏ –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as user_err:
            print(f"‚Äº –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_err}")
        

@reviews_router.message(F.text == "üìÅ –ú–æ–∏ –æ—Ç–∑—ã–≤—ã")
async def looking_reviews(message: Message):
    await send_reviews_list(message = message, user_id = message.from_user.id, page = 0)

async def send_reviews_list(message: Message | CallbackQuery, user_id: int, page: int):
    try:
        if isinstance(message, CallbackQuery):
            send_fn = message.message.edit_text
        else:
            send_fn = message.answer

        limit = 6  # –±–µ—Ä—ë–º –Ω–∞ –æ–¥–∏–Ω –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        offset = page * 5
        query = """
            SELECT id, id_chat, id_message, datetime, title 
            FROM reviews 
            WHERE user_id = :id 
            ORDER BY datetime DESC
            LIMIT :limit OFFSET :offset
        """
        params = {"id": user_id, "limit": limit, "offset": offset}

        result = await db_connector.execute_query(query, params)
        rows = result.fetchall()
        reviews = rows[:5]  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5
        has_next_page = len(rows) > 5

        if not reviews:
            await send_fn("–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        builder = InlineKeyboardBuilder()
        for review in reviews:
            label = f"{review.datetime.strftime('%d.%m %H:%M')} - {review.title}"
            builder.button(text=label, callback_data=f"review_detail_{review.id}_{page}")

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if has_next_page:
            builder.button(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"review_page_{page+1}")
        if page > 0:
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"review_page_{page-1}")

        builder.adjust(1)
        await send_fn("–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:", reply_markup=builder.as_markup())
    
    except Exception as e:
        await send_long_message(f"Exception reviews.py ( line - 112 ) {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}")


@reviews_router.callback_query(F.data.startswith("review_page_"))
async def paginate_orders(callback: CallbackQuery):
    parts = callback.data.split("_")
    page = int(parts[2])
    await send_reviews_list(callback, callback.from_user.id, page)

@reviews_router.callback_query(F.data.startswith("review_detail_"))
async def show_order_detail(callback: CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        # "review", "detail", "{review_id}", "{page}"
        if len(parts) < 4:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
            await send_long_message(f"Exception reviews.py ( line - 128 ) {datetime.now().strftime('%d %B %Y, %H:%M:%S')}")
            return

        _, _, review_id, page = parts

        query_review = """
        SELECT
            id,
            user_id,
            id_chat,
            id_message,
            datetime,
            title
        FROM reviews
        WHERE id = :id
        """
        result = await db_connector.execute_query(query_review, {"id": int(review_id)})
        records = result.mappings().all()

        if not records:
            await callback.answer("–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ë–µ—Ä—ë–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        first = records[0]

        text = (
            f"üìÖ –î–∞—Ç–∞: {first['datetime'].strftime('%d.%m.%Y')}\n"
            f"üïí –í—Ä–µ–º—è: {first['datetime'].strftime('%H:%M')}\n\n"
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô–ù–∞–∑–∞–¥ –∫ –æ—Ç–∑—ã–≤–∞–º", callback_data=f"review_page_{page}")

        await callback.message.edit_text(text, reply_markup=builder.as_markup())

        await bot.forward_message(
            chat_id=callback.message.chat.id,
            from_chat_id=first['id_chat'],
            message_id=first['id_message']
        )
    except Exception as e:
        await send_long_message(f"Exception reviews.py ( line - 169 ) {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}")
    
@reviews_router.message(F.text == "üí¨ –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
async def link_to_all_reviews(message: Message, state: FSMContext):
    await message.answer("–¢—É—Ç –Ω–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –æ—Å—Ç–∞–≤–ª—è—é—Ç —Å–≤–æ–∏ –æ—Ç–∑—ã–≤—ã: https://t.me/+GuM0A679aiU1YmEy", reply_markup=review_kb())

