from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import date, datetime, timedelta
from create_bot import db_connector, bot
from keyboards.all_kb import main_kb, employee_kb
from aiogram.exceptions import TelegramBadRequest
from messaging_exception.messaging import send_long_message

emp_router = Router()


@emp_router.message(F.text == "‚öôÔ∏è –ö–∞–±–∏–Ω–µ—Ç-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
async def show_user_kb(message: Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n", reply_markup=employee_kb(message.from_user.id))

@emp_router.message(F.text == "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def go_users_menu(message: Message):
    await message.answer(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—É–¥–∏—è –∫—Ä–∞—Å–æ—Ç—ã Barbero!\n"
                "–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=main_kb(message.from_user.id))
    

@emp_router.message(F.text == "–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def startshow_orders_today(message: Message):
    msg = await show_orders_today(message.from_user.id, datetime.today())
    try:
        await bot.send_message(message.from_user.id, msg)
    except TelegramBadRequest as e:
        await send_long_message(f"Excpetion employee_panel.py 34 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (user_id: {message.from_user.id}): {e}")

    


async def show_orders_today(user_id: int, dates = None):
    if date is None:
        msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î!"
        print("–ü—Ä–∏ –≤—ã–∑–æ–≤–µ show_orders_today –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–∞—Ç–∞!")
        return msg
    else:
        today = dates
    request = await db_connector.execute_query("SELECT id FROM employees WHERE user_id = :id",{"id": user_id})
    row_emp = request.fetchone()
    emp = {"id": row_emp.id if row_emp else None, "user_id": user_id}
    result = await db_connector.execute_query("""
            SELECT 
                o.orders_id,
                o.total_duration,
                o.total_price,
                u.name AS client_name,
                u.phone,
                u.id,
                o.time,
                s.name AS service_name
            FROM orders o
            JOIN users u ON u.id = o.user_id
            JOIN orders_has_services ohs ON o.orders_id = ohs.order_id
            JOIN services s ON s.id = ohs.services_id
            WHERE o.employee_id = :eid AND o.date = :today
            ORDER BY o.time;
        """, {"eid": emp["id"], "today": today})

    rows = result.mappings().all()
    if not rows:
        msg = f"–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}) –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç."
        return msg

    # --- –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ ---
    orders_map = {}
    for row in rows:
        oid = row["orders_id"]
        if oid not in orders_map:
            orders_map[oid] = {
                "time": row["time"],
                "client_name": row["client_name"],
                "user_id": row["id"],
                "phone": row["phone"],
                "total_duration": row["total_duration"],
                "total_price": row["total_price"],
                "services": []
            }
        orders_map[oid]["services"].append(row["service_name"])

    # —Ç–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
    orders = list(orders_map.values())
    lines = [f"–ö–ª–∏–µ–Ω—Ç—ã –Ω–∞ {today.strftime('%d.%m.%Y')}:"]

    count = 1
    for o in orders:
        services_text = o['services']
        h, m = divmod(o['total_duration'], 60)
        duration = f"{f'{h} —á ' if h else ''}{m} –º–∏–Ω" if m or h == 0 else f"{h} —á"
        time_str = o['time'].strftime("%H:%M")
        lines.append(
            f"\n\n{count}. ‚è∞ –í—Ä–µ–º—è: {time_str}\n"
            f"    üìã –£—Å–ª—É–≥–∏:\n" + "\n".join(
            f"      ‚Ä¢ {name.replace('_', ', ').title()}" 
                    for name in services_text) + "\n\n"
            f"    ‚è± –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
            f"    üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—É–≥: {o['total_price']}‚ÇΩ\n\n"
            f"    üíá‚Äç‚ôÇÔ∏è –ò–º—è: {o['client_name'].capitalize()}\n"
            f"    üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{o['phone']}\n"
            f"    üîó <a href='tg://user?id={o['user_id']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>\n\n" 
        )
        count += 1

    msg = "\n".join(lines)

    return msg

DAYS_OF_WEEK = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
DAY_EMOJI = {True: "‚ùå", False: "‚úÖ"}  # –≤—ã—Ö–æ–¥–Ω–æ–π/—Ä–∞–±–æ—á–∏–π

# ------------------------ –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ------------------------
async def build_schedule_message(emp_id: int, editing: bool = False):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    res = await db_connector.execute_query(
        "SELECT name FROM employees WHERE id = :eid",
        {"eid": emp_id}
    )
    row = res.fetchone()
    if not row:
        return "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", None

    emp_name = row.name

    # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞
    res = await db_connector.execute_query(
        "SELECT weekday FROM employees_week_offday WHERE employee_id = :eid",
        {"eid": emp_id}
    )
    days_off = [r.weekday for r in res.fetchall()]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≥—Ä–∞—Ñ–∏–∫–∞
    text = f"üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –¥–ª—è <b>{emp_name}</b>:\n\n"
    for i, day in enumerate(DAYS_OF_WEEK):
        is_off = i in days_off
        text += f"{DAY_EMOJI[is_off]} {day}\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    if editing:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–Ω–µ–π
        for i, day in enumerate(DAYS_OF_WEEK):
            is_off = i in days_off
            builder.button(
                text=f"{DAY_EMOJI[is_off]} {day}",
                callback_data=f"toggle_day_{emp_id}_{i}"
            )
        builder.adjust(4)
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data=f"back_schedule_{emp_id}", row=5)
    else:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data=f"edit_schedule_{emp_id}")

    return text, builder


# ------------------------ –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–∞ ------------------------
@emp_router.message(F.text == "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã")
async def show_week_schedule(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    res = await db_connector.execute_query(
        "SELECT id FROM employees WHERE user_id = :uid",
        {"uid": message.from_user.id}
    )
    row_emp = res.fetchone()
    if not row_emp:
        return await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    emp_id = row_emp.id
    text, builder = await build_schedule_message(emp_id)
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")


# ------------------------ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ------------------------
@emp_router.callback_query(F.data.startswith("edit_schedule_"))
async def edit_week_schedule(callback: CallbackQuery):
    await callback.answer()
    emp_id = int(callback.data.split("_")[-1])
    text, builder = await build_schedule_message(emp_id, editing=True)
    await callback.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π/–≤—ã—Ö–æ–¥–Ω–æ–π:",
        reply_markup=builder.as_markup()
    )

# ------------------------ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–Ω—è ------------------------
@emp_router.callback_query(F.data.startswith("toggle_day_"))
async def toggle_day(callback: CallbackQuery):
    await callback.answer()
    parts = callback.data.split("_")
    emp_id = int(parts[-2])
    weekday = int(parts[-1])

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–µ–Ω—å –≤ –±–∞–∑–µ
    res = await db_connector.execute_query(
        "SELECT employee_id FROM employees_week_offday WHERE employee_id = :eid AND weekday = :day",
        {"eid": emp_id, "day": weekday}
    )
    existing = res.fetchone()

    if existing:
        await db_connector.execute_query(
            "DELETE FROM employees_week_offday WHERE employee_id = :eid AND weekday = :day",
            {"eid": emp_id, "day": weekday}
        )
    else:
        await db_connector.execute_query(
            "INSERT INTO employees_week_offday (employee_id, weekday) VALUES (:eid, :day)",
            {"eid": emp_id, "day": weekday}
        )

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    res = await db_connector.execute_query(
        "SELECT weekday FROM employees_week_offday WHERE employee_id = :eid",
        {"eid": emp_id}
    )
    days_off = [r.weekday for r in res.fetchall()]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    builder = InlineKeyboardBuilder()
    for i, day in enumerate(DAYS_OF_WEEK):
        is_off = i in days_off
        builder.button(
            text=f"{DAY_EMOJI[is_off]} {day}",
            callback_data=f"toggle_day_{emp_id}_{i}"
        )
    builder.adjust(4)
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data=f"back_schedule_{emp_id}", row=5)

    await callback.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π/–≤—ã—Ö–æ–¥–Ω–æ–π:",
        reply_markup=builder.as_markup()
    )

# ------------------------ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É ------------------------
@emp_router.callback_query(F.data.startswith("back_schedule_"))
async def back_to_schedule(callback: CallbackQuery):
    await callback.answer()
    emp_id = int(callback.data.split("_")[-1])
    text, builder = await build_schedule_message(emp_id)
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")


    # FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
class ExceptionSchedule(StatesGroup):
    waiting_for_date = State()
    waiting_for_type = State()

# –î–Ω–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–¥–∞—Ç—ã)
def generate_date_buttons():
    builder = InlineKeyboardBuilder()
    today = datetime.today().date()
    start_date = today + timedelta(weeks=2)
    end_date = today + timedelta(weeks=4)

    current = start_date
    while current <= end_date:
        builder.button(
            text=current.strftime("%d.%m.%Y"),
            callback_data=f"exception_date_{current.strftime('%Y-%m-%d')}"
        )
        current += timedelta(days=1)

    builder.adjust(3)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
    return builder

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
@emp_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π/—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å")
async def start_add_exception(message: Message, state: FSMContext):
    await state.clear()
    # –ü–æ–ª—É—á–∞–µ–º emp_id –∫–∞–∫ –æ–±—ã—á–Ω–æ
    request = await db_connector.execute_query(
        "SELECT id FROM employees WHERE user_id = :uid",
        {"uid": message.from_user.id}
    )
    row_emp = request.fetchone()
    if not row_emp:
        return await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    emp_id = row_emp.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º emp_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(emp_id=emp_id)
    builder = generate_date_buttons()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=builder.as_markup())
    await state.set_state(ExceptionSchedule.waiting_for_date)

# –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏–∑ –∫–Ω–æ–ø–æ–∫
@emp_router.callback_query(F.data.startswith("exception_date_"))
async def select_exception_date(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    date_str = callback.data.replace("exception_date_", "")
    exception_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    await state.update_data(exception_date=exception_date)

    # –ü–æ–ª—É—á–∞–µ–º emp_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    emp_id = data.get("emp_id")
    if not emp_id:
        return await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0=–ü–Ω, 6=–í—Å)
    weekday = exception_date.weekday()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    result = await db_connector.execute_query(
        "SELECT weekday FROM employees_week_offday WHERE employee_id = :eid",
        {"eid": emp_id}
    )
    days_off = [row.weekday for row in result.fetchall()]

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –¥–Ω—è
    builder = InlineKeyboardBuilder()
    if weekday in days_off:
        # –¥–µ–Ω—å –ø–æ –≥—Ä–∞—Ñ–∏–∫—É –≤—ã—Ö–æ–¥–Ω–æ–π ‚Üí –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—á–∏–º
        builder.button(text="üíà –°–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—á–∏–º", callback_data="exception_working")
    else:
        # –¥–µ–Ω—å –ø–æ –≥—Ä–∞—Ñ–∏–∫—É —Ä–∞–±–æ—á–∏–π ‚Üí –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–º
        builder.button(text="üèùÔ∏è –°–¥–µ–ª–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–º", callback_data="exception_day_off")

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data="back_to_dates")

    builder.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
    await state.set_state(ExceptionSchedule.waiting_for_type)
    await callback.message.edit_text(
        f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {exception_date}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–Ω—è
@emp_router.callback_query(F.data.startswith("exception_"))
async def select_exception_type(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    if not data.get("exception_date"):
        return await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    exception_date = data["exception_date"]
    is_working = callback.data == "exception_working"

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    request = await db_connector.execute_query(
        "SELECT id FROM employees WHERE user_id = :uid",
        {"uid": callback.from_user.id}
    )
    row_emp = request.fetchone()
    if not row_emp:
        return await callback.message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    emp_id = row_emp.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
    existing = await db_connector.execute_query(
        "SELECT employee_id FROM employees_exceptions WHERE employee_id = :eid AND exception_date = :date",
        {"eid": emp_id, "date": exception_date}
    )
    if existing.fetchone():
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        await db_connector.execute_query(
            "UPDATE employees_exceptions SET is_working = :work WHERE employee_id = :eid AND exception_date = :date",
            {"work": is_working, "eid": emp_id, "date": exception_date}
        )
    else:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        await db_connector.execute_query(
            "INSERT INTO employees_exceptions (employee_id, exception_date, is_working) VALUES (:eid, :date, :work)",
            {"eid": emp_id, "date": exception_date, "work": is_working}
        )

    await callback.message.edit_text(
        f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {exception_date.strftime('%d.%m.%Y')} ‚Äî {'–†–∞–±–æ—á–∏–π –¥–µ–Ω—å' if is_working else '–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å'}"
    )
    await state.clear()

@emp_router.callback_query(F.data == "back_to_dates")
async def back_to_date_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    builder = generate_date_buttons()  # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ 2-4 –Ω–µ–¥–µ–ª–∏
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(ExceptionSchedule.waiting_for_date)


@emp_router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π")
async def select_record_date(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    request = await db_connector.execute_query(
        "SELECT id FROM employees WHERE user_id = :uid",
        {"uid": message.from_user.id}
    )
    row_emp = request.fetchone()
    if not row_emp:
        return await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    emp_id = row_emp.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞ –ø–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É
    result = await db_connector.execute_query(
        "SELECT weekday FROM employees_week_offday WHERE employee_id = :eid",
        {"eid": emp_id}
    )
    days_off = [row.weekday for row in result.fetchall()]

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è (—Ä–∞–±–æ—á–∏–µ/–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏)
    result = await db_connector.execute_query(
        "SELECT exception_date, is_working FROM employees_exceptions WHERE employee_id = :eid",
        {"eid": emp_id}
    )
    exceptions = {row.exception_date: row.is_working for row in result.fetchall()}

    # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: —Å–µ–≥–æ–¥–Ω—è + 1 –Ω–µ–¥–µ–ª—è
    start_date = datetime.now().date()
    end_date = start_date + timedelta(days=8)

    builder = InlineKeyboardBuilder()
    current_date = start_date
    while current_date <= end_date:
        weekday = current_date.weekday()  # –ü–Ω=0, –í—Å=6
        is_working = True

        if current_date in exceptions:
            is_working = exceptions[current_date]  # —É—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        else:
            is_working = weekday not in days_off  # –æ–±—ã—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫

        if is_working:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
            builder.button(
                text=current_date.strftime("%d.%m.%Y"),
                callback_data=f"view_records_{current_date}"
            )
        current_date += timedelta(days=1)

    builder.adjust(4)  # 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:", reply_markup=builder.as_markup())


@emp_router.callback_query(F.data.startswith("view_records_"))
async def view_records(callback: CallbackQuery):
    await callback.answer()
    date_str = callback.data.replace("view_records_", "")
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    msg = await show_orders_today(callback.from_user.id, selected_date)
    await bot.send_message(callback.from_user.id, msg)

    


        