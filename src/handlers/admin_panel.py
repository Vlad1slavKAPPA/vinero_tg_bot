from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from create_bot import db_connector
from create_bot import bot
from keyboards.all_kb import main_kb, admin_kb
from aiogram.exceptions import DetailedAiogramError
from messaging_exception.messaging import send_long_message

apanel_router = Router()

class Admin_Panel(StatesGroup): 
    info = State()

    phone_new_emp = State()
    start_time_new_emp = State()
    end_time_new_emp = State()
    name_new_emp = State()
    role_new_emp = State()

    confirming_data_new_emp = State()

    full_data_emp = State()
    
    confirming_add_emp = State()

    name_edit_old = State()
    role_edit_old = State()
    start_time_edit_old = State()
    end_time_edit_old = State()

    full_data_serv = State()

    sname_add = State()
    sprice_add = State()
    sduration_add = State()
    data_full_add = State()

    sname_edit_old = State()
    sprice_edit_old = State()
    sduration_edit_old = State()
    ssex_edit_old = State()

    rname = State()
    rdate = State()

@apanel_router.message(F.text == "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_user_kb(message: Message):
    await message.answer(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—É–¥–∏—è –∫—Ä–∞—Å–æ—Ç—ã Barbero!\n"
                "–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=main_kb(message.from_user.id)
            )
    
@apanel_router.message(F.text == "üõ† –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def add_status_admin(message: Message):
    user_id = message.from_user.id
    #check_status = await db_connector.execute_query("SELECT admin_status FROM users WHERE id = :id", {"id": int(user_id)})
    if user_id in db_connector.admins_cache: 
        try:
            query = "UPDATE users SET admin_status = :admin_status WHERE id = :id"
            await db_connector.execute_query(query, {"id": int(user_id), "admin_status": False})
            await db_connector.load_admins()
        except DetailedAiogramError as e:
            await send_long_message(f"Excpetion admin_panel.py 67 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
            await message.answer("‚ùå –ü—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
            return
        await message.answer(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã!", reply_markup=main_kb(message.from_user.id))
    else:
        try:
            query = "UPDATE users SET admin_status = :admin_status WHERE id = :id"
            await db_connector.execute_query(query, {"id": int(user_id), "admin_status": True})
            await db_connector.load_admins()
        except DetailedAiogramError as e:
            await send_long_message(f"Excpetion admin_panel.py 67 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
            await message.answer("‚ùå –ü—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
            return
        await message.answer(f"‚úÖ –í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=main_kb(message.from_user.id))

    
@apanel_router.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def show_user_kb(message: Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n", reply_markup=admin_kb(message.from_user.id))

@apanel_router.message(F.text == "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
async def show_list_emp(message: Message, state: FSMContext):
    await list_emp(message, page = 0, state = state)
    
async def list_emp(message: Message | CallbackQuery, page: int, state: FSMContext):
    if isinstance(message, CallbackQuery):
        send_fn = message.message.edit_text
    else:
        send_fn = message.answer

    query = """
        SELECT 
        e.user_id AS id, 
        e.name, 
        r.name AS role_name,
        u.phone
        FROM employees e
        JOIN users u ON e.user_id = u.id
        JOIN roles r ON e.role_id = r.id
        LIMIT 6 OFFSET :offset
    """
    params = {"offset": page * 5}

    result = await db_connector.execute_query(query, params)
    rows = result.mappings().all()
    employees = rows[:5]
    await state.update_data(full_data_emp = employees)
    has_next_page = len(rows) > 5
    
    if not employees:
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data=f"employee_add")
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=builder.as_markup())
        return
    
    builder = InlineKeyboardBuilder()
    for employee in employees:
        label = f"{employee['name']} - {employee['phone']} - {employee['role_name']}"
        builder.button(text=label, callback_data=f"employee_detail_{employee['id']}_{page}")
        

    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data=f"employee_add")

    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"employee_page_{page-1}")
    if has_next_page:
        builder.button(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"employee_page_{page+1}")
    
    builder.adjust(1)

    await send_fn("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:", reply_markup=builder.as_markup())

@apanel_router.callback_query(F.data.startswith("employee_page_"))
async def paginate_emp(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    page = int(parts[2])
    await list_emp(callback, page, state)

@apanel_router.callback_query(F.text == "üë®‚Äçüîß –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
async def start_add_employee_text(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –±—É–¥—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\n\n–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ!\n\n–ü—Ä–∏–º–µ—Ä: +79528129191")
    await state.set_state(Admin_Panel.phone_new_emp)

@apanel_router.callback_query(F.data.startswith("employee_add"))
async def start_add_employee(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –±—É–¥—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\n\n–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ!\n\n–ü—Ä–∏–º–µ—Ä: +79528129191")
    await state.set_state(Admin_Panel.phone_new_emp)

@apanel_router.message(Admin_Panel.phone_new_emp)
async def find_user(message: Message, state: FSMContext):
    phone = message.text.strip()
    if phone[1:].isdigit() and 10 <= len(phone) <= 15:
        if phone.startswith("+"): phone = phone[1:]
        print(f"–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ{phone}")
        request = await db_connector.execute_query('SELECT id, name, gender, phone FROM users WHERE phone = :phone', {'phone': phone})
        result = request.mappings().fetchone()
        print(result)
        if result is not None and result['phone'] == phone:
            request = await db_connector.execute_query("SELECT user_id, name FROM employees WHERE user_id = :id", {"id": result["id"]})
            result_check_old_emp = request.mappings().fetchone()
            if not result_check_old_emp:
                await state.update_data({"full_data_emp": dict(result)})
                await state.update_data(phone_new_emp = phone)
                await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
                await state.set_state(Admin_Panel.name_new_emp)
            else:
                await message.answer("‚ùó –ö –¥–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79528125252\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    
    

@apanel_router.message(Admin_Panel.name_new_emp)
async def name_new_employee(message: Message, state: FSMContext):
    await state.update_data(name_new_emp = message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–º–µ–Ω–∞ —É —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü—Ä–∏–º–µ—Ä: 10:00")
    await state.set_state(Admin_Panel.start_time_new_emp)

@apanel_router.message(Admin_Panel.start_time_new_emp)
async def name_new_employee(message: Message, state: FSMContext):
    user_input = message.text.strip()
    try:
        # –ü–∞—Ä—Å–∏–º –≤ datetime –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç time
        parsed_time = datetime.strptime(user_input, "%H:%M").time()
        # –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∏–ª–∏ —Å—Ä–∞–∑—É –≤ –ë–î
        await state.update_data(start_time_new_emp = parsed_time)

    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 168 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00")

    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è —Å–º–µ–Ω–∞ —É —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü—Ä–∏–º–µ—Ä: 19:00")
    await state.set_state(Admin_Panel.end_time_new_emp)

@apanel_router.message(Admin_Panel.end_time_new_emp)
async def name_new_employee(message: Message, state: FSMContext):
    user_input = message.text.strip()
    try:
        # –ü–∞—Ä—Å–∏–º –≤ datetime –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç time
        parsed_time = datetime.strptime(user_input, "%H:%M").time()
        # –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∏–ª–∏ —Å—Ä–∞–∑—É –≤ –ë–î
        await state.update_data(end_time_new_emp = parsed_time)
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 183 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00")

    query = "SELECT id, name FROM roles"
    result = await db_connector.execute_query(query)
    roles = result.fetchall()

    builder = InlineKeyboardBuilder()
    for role in roles:
        builder.button(text=role.name, callback_data=f"employee_role_{role.id}_{role.name}")
    builder.adjust(1)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=builder.as_markup())

@apanel_router.callback_query(F.data.startswith("employee_role_"))
async def role_new_employee(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    parts = callback.data.split("_")
    await state.update_data({"role_new_emp": {'id': parts[2], 'r_name': parts[3]}})
    await show_summary(state, callback.message)
    
async def show_summary(state: FSMContext, message: Message):
    data = await state.get_data()

    new_name = data.get("name_new_emp")
    new_phone = data.get("phone_new_emp")
    new_start_time = data.get("start_time_new_emp")
    new_end_time = data.get("end_time_new_emp")
    user_data = data.get("full_data_emp")
    new_role_emp = data.get("role_new_emp")  # –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂ (id, name)

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add_emp")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add_emp")
    builder.adjust(1)


    await message.answer(
    text=(
        f"–ò–º—è, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['name']}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{new_phone}\n\n"
        f"<a href='tg://user?id={user_data['id']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>\n\n"
        f"–ò–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_name}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {new_role_emp['r_name']}\n"
        f"–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã: {new_start_time.strftime('%H:%M')}\n"
        f"–ö–æ–Ω–µ—Ü —Å–º–µ–Ω—ã: {new_end_time.strftime('%H:%M')}"
    ),
    parse_mode="HTML",
    reply_markup=builder.as_markup()
)

    await state.update_data({
        "confirming_add_emp": {
            'phone': new_phone,
            'id_role': new_role_emp['id'],
            'name': new_name,
            'start_time': new_start_time,
            'end_time': new_end_time,
            'user_id': user_data['id']
        }
    })

@apanel_router.callback_query(F.data.startswith("cancel_add_emp"))
async def cancel_new_emp(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(text="‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫  –Ω–µ —Å–æ–∑–¥–∞–Ω.")

@apanel_router.callback_query(F.data.startswith("confirm_add_emp"))
async def save_new_emp(callback: CallbackQuery, state: FSMContext):
    query = """
    INSERT INTO employees (start_time, end_time, name, role_id, user_id)
    VALUES (:start_time, :end_time, :name, :role_id, :user_id)
    """
    data = await state.get_data()
    confirming = data.get("confirming_add_emp")
    try:
        await db_connector.execute_query(query,{'role_id': int(confirming['id_role']), 'name': confirming['name'], 'start_time': confirming['start_time'], 'end_time': confirming['end_time'], 'user_id': confirming['user_id']})
        
        await callback.answer()
        
    except DetailedAiogramError as e:
        await callback.answer()
        await callback.message.answer(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
        await send_long_message(f"Excpetion admin_panel.py 266 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
    await bot.send_message(chat_id = confirming['user_id'], text=f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å –∏–º–µ–Ω–µ–º {confirming['name']}.")
    print(f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å –∏–º–µ–Ω–µ–º {confirming['name']}")
    await callback.message.answer(text="‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω.")
    await db_connector.load_employees()
    await state.clear()
    await list_emp(callback, 0, state)

@apanel_router.callback_query(F.data.startswith("employee_detail_"))
async def show_employee_detail(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    # "employee", "detail", "{user_id}", "{page}"
    if len(parts) < 4:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return
    
    employee_id = parts[2]
    page = parts[3]

    query = """
    SELECT  
        e.name,
        e.start_time,
        e.end_time,
        e.user_id,
        r.name AS role_name,
        r.id AS role_id,
        u.phone
    FROM employees e
    JOIN roles r ON e.role_id = r.id
    JOIN users u ON e.user_id = u.id
    WHERE e.user_id = :employee_id
    """
    params = {"employee_id": int(employee_id)}
    result = await db_connector.execute_query(query, params) 

    request = result.mappings().all()

    if not request:
        await callback.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        
    employees = request[0]

    detail_text = (
        f"üíá‚Äç‚ôÇÔ∏è –ò–º—è –º–∞—Å—Ç–µ—Ä–∞: {employees['name']}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–∞: {employees['role_name']}\n\n"
        f"üïí –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {employees['start_time'].strftime('%H:%M')}\n"
        f"üïí –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {employees['end_time'].strftime('%H:%M')}\n\n"
        f"üìã –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n+{employees['phone']}\n\n"
        f"<a href='tg://user?id={employee_id}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>\n\n"
    )
    
    await state.update_data({
        "info": {
            'name': employees['name'],
            'role_id': employees['role_id'],
            'role_name': employees['role_name'],
            'start_time': employees['start_time'],
            'end_time': employees['end_time'],
            'phone': employees['phone'],
            'user_id': employee_id
        }
    })

    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        callback_data=f"edit_employee_{employee_id}_{page}"
    )
    builder.button(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        callback_data=f"delete_employee_{employee_id}_{employees['name']}"
    )
    builder.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º",
        callback_data=f"employee_page_{page}"
    )
    builder.adjust(2)

    await callback.message.edit_text(detail_text, reply_markup=builder.as_markup(), parse_mode="HTML")


@apanel_router.callback_query(F.data.startswith("delete_employee_"))
async def delete_employee(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    user_id = parts[2]
    name = parts[3]
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ",
        callback_data=f"complete_delete_{user_id}"
    )
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ",
        callback_data=f"employee_detail_{user_id}_{0}"
    )

    await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∏–º–µ–Ω–µ–º \"{name}\"?", reply_markup=builder.as_markup())

@apanel_router.callback_query(F.data.startswith("complete_delete_"))
async def comfirm_delete_employee(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    user_id = int(parts[2])

    try:
        query = "DELETE FROM employees WHERE user_id = :user_id"
        await db_connector.execute_query(query, {"user_id": user_id})
        await callback.message.edit_text("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        await db_connector.load_employees()
    except DetailedAiogramError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ë–î!")
        await send_long_message(f"Excpetion admin_panel.py 377 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        return
    

    await show_list_emp(callback.message, state)

@apanel_router.callback_query(F.data.startswith("edit_employee_"))
async def show_employee_edit(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    user_id = parts[2]
    page = parts[3]

    data = await state.get_data()
    employees = data.get("info", {})
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if not employees:
        await callback.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    detail_text = (
        f"üíá‚Äç‚ôÇÔ∏è –ò–º—è –º–∞—Å—Ç–µ—Ä–∞: {employees['name']}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–∞: {employees['role_name']}\n\n"
        f"üïí –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {employees['start_time'].strftime('%H:%M')}\n"
        f"üïí –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {employees['end_time'].strftime('%H:%M')}\n\n"
        f"üìã –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n+{employees['phone']}\n\n"
        f"<a href='tg://user?id={data['user_id']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>\n\n"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_name_{user_id}")
    builder.button(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"edit_role_{user_id}")
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", callback_data=f"edit_start_time_{user_id}")
    builder.button(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", callback_data=f"edit_end_time_{user_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"employee_detail_{employees['user_id']}_{page}")
    builder.adjust(2)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    try:
        await callback.message.edit_text(detail_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 418 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        if "message is not modified" not in str(e):
            raise


# –•–µ–Ω–¥–ª–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
@apanel_router.callback_query(F.data.startswith("edit_name_"))
async def edit_employee_name(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    user_id = parts[2]
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    await callback.answer()
    await state.set_state(Admin_Panel.name_edit_old)

@apanel_router.message(Admin_Panel.name_edit_old)
async def save_editing_name(message: Message, state: FSMContext):
    new_name = message.text.strip()
    info =  await state.get_data()
    data = info.get("info", {})
    user_id = data["user_id"]
    data["name"] = new_name
    await state.update_data(info=data)

    try:
        query = "UPDATE employees SET name = :name WHERE user_id = :user_id"
        await db_connector.execute_query(query, {"name": new_name, "user_id": int(user_id)})
    except DetailedAiogramError as e:
        #–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        await send_long_message(f"Excpetion admin_panel.py 446 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        await message.answer("‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ë–î!")
        return
    await message.answer(f"‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ. –ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_name}")

    detail_text = (
        f"üíá‚Äç‚ôÇÔ∏è –ò–º—è –º–∞—Å—Ç–µ—Ä–∞: {data['name']}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–∞: {data['role_name']}\n\n"
        f"üïí –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {data['start_time'].strftime('%H:%M')}\n"
        f"üïí –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {data['end_time'].strftime('%H:%M')}\n\n"
        f"üìã –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n+{data['phone']}\n\n"
        f"<a href='tg://user?id={data['user_id']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>\n\n"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_name_{user_id}")
    builder.button(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"edit_role_{user_id}")
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", callback_data=f"edit_start_time_{user_id}")
    builder.button(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", callback_data=f"edit_end_time_{user_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"employee_detail_{data['user_id']}_{0}")
    builder.adjust(2)

    try:
        await message.answer(detail_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 472 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        if "message is not modified" not in str(e):
            raise



# –•–µ–Ω–¥–ª–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
@apanel_router.callback_query(F.data.startswith("edit_role_"))
async def edit_employee_role(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    user_id = parts[2]
    print(f"user_id:{user_id}")
    query = "SELECT id, name FROM roles"
    result = await db_connector.execute_query(query)
    roles = result.fetchall()

    builder = InlineKeyboardBuilder()
    for role in roles:
        builder.button(text=role.name, callback_data=f"save_employee_role_{role.id}_{user_id}_{role.name}")
    builder.adjust(1)

    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å ID {user_id}", reply_markup=builder.as_markup())
    await callback.answer()

@apanel_router.callback_query(F.data.startswith("save_employee_role_"))
async def role_new_employee(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    parts = callback.data.split("_")
    role_id = int(parts[3])
    user_id = int(parts[4])
    role_name = parts[5]
    info = await state.get_data()
    data = info.get("info", {})
    
    
    try:
        query = "UPDATE employees SET role_id = :role_id WHERE user_id = :user_id"
        await db_connector.execute_query(query, {"role_id":role_id, "user_id": user_id})
        data["role_name"] = role_name
        data["role_id"] = role_id
        await state.update_data(info=data)
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 514 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏ —É —Å–æ—Ç—Ä—É–¥–∏–∫–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑—Ä—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ë–î!")
        return
    await callback.message.answer(f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")

    detail_text = (
        f"üíá‚Äç‚ôÇÔ∏è –ò–º—è –º–∞—Å—Ç–µ—Ä–∞: {data['name']}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–∞: {data['role_name']}\n\n"
        f"üïí –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {data['start_time'].strftime('%H:%M')}\n"
        f"üïí –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {data['end_time'].strftime('%H:%M')}\n\n"
        f"üìã –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n+{data['phone']}\n\n"
        f"<a href='tg://user?id={data['user_id']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>\n\n"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_name_{user_id}")
    builder.button(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"edit_role_{user_id}")
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", callback_data=f"edit_start_time_{user_id}")
    builder.button(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", callback_data=f"edit_end_time_{user_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"employee_detail_{data['user_id']}_{0}")
    builder.adjust(2)
    try:
        await callback.message.answer(detail_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 540 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        if "message is not modified" not in str(e):
            raise



@apanel_router.callback_query(F.data.startswith("edit_start_time_"))
async def edit_employee_start_time(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    user_id = parts[3]
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å.")
    await callback.answer()
    await state.set_state(Admin_Panel.start_time_edit_old)

@apanel_router.message(Admin_Panel.start_time_edit_old)
async def save_editing_start_time(message: Message, state: FSMContext):
    new_time = message.text.strip()
    info =  await state.get_data()
    data = info.get("info", {})
    user_id = data["user_id"]
    data["start_time"] = new_time
    await state.update_data(info=data)


    try:
        # –ü–∞—Ä—Å–∏–º –≤ datetime –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç time
        parsed_time = datetime.strptime(new_time, "%H:%M").time()
        # –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∏–ª–∏ —Å—Ä–∞–∑—É –≤ –ë–î
        data["start_time"] = parsed_time
        await state.update_data(info=data)
        query = "UPDATE employees SET start_time = :time WHERE user_id = :user_id"
        if not await db_connector.execute_query(query, {"time": parsed_time, "user_id": int(user_id)}): await message.answer("‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑—Ä—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ë–î!")

    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 574 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00")
    await message.answer(f"‚úÖ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –∏–∑–º–µ–Ω–æ.")




    detail_text = (
        f"üíá‚Äç‚ôÇÔ∏è –ò–º—è –º–∞—Å—Ç–µ—Ä–∞: {data['name']}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–∞: {data['role_name']}\n\n"
        f"üïí –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {parsed_time}\n"
        f"üïí –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {data['end_time'].strftime('%H:%M')}\n\n"
        f"üìã –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n+{data['phone']}\n\n"
        f"<a href='tg://user?id={data['user_id']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>\n\n"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_name_{user_id}")
    builder.button(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"edit_role_{user_id}")
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", callback_data=f"edit_start_time_{user_id}")
    builder.button(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", callback_data=f"edit_end_time_{user_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"employee_detail_{data['user_id']}_{0}")
    builder.adjust(2)

    try:
        await message.answer(detail_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 602 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        if "message is not modified" not in str(e):
            raise


@apanel_router.callback_query(F.data.startswith("edit_end_time_"))
async def edit_employee_start_time(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    user_id = parts[3]
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å.")
    await callback.answer()
    await state.set_state(Admin_Panel.end_time_edit_old)

@apanel_router.message(Admin_Panel.end_time_edit_old)
async def save_editing_start_time(message: Message, state: FSMContext):
    new_time = message.text.strip()
    info =  await state.get_data()
    data = info.get("info", {})
    user_id = data["user_id"]
    await state.update_data(info=data)


    try:
        # –ü–∞—Ä—Å–∏–º –≤ datetime –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç time
        parsed_time = datetime.strptime(new_time, "%H:%M").time()
        # –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∏–ª–∏ —Å—Ä–∞–∑—É –≤ –ë–î
        data["end_time"] = parsed_time
        await state.update_data(info=data)
        query = "UPDATE employees SET end_time = :time WHERE user_id = :user_id"
        if not await db_connector.execute_query(query, {"time": parsed_time, "user_id": int(user_id)}): await message.answer("‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ë–î!")

    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 634 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00")
    await message.answer(f"‚úÖ –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –∏–∑–º–µ–Ω–µ–Ω.")
    



    detail_text = (
        f"üíá‚Äç‚ôÇÔ∏è –ò–º—è –º–∞—Å—Ç–µ—Ä–∞: {data['name']}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–∞: {data['role_name']}\n\n"
        f"üïí –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {parsed_time}\n"
        f"üïí –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {data['end_time'].strftime('%H:%M')}\n\n"
        f"üìã –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n+{data['phone']}\n\n"
        f"<a href='tg://user?id={data['user_id']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>\n\n"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_name_{user_id}")
    builder.button(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"edit_role_{user_id}")
    builder.button(text="‚úè  –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", callback_data=f"edit_start_time_{user_id}")
    builder.button(text="üõ† –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", callback_data=f"edit_end_time_{user_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"employee_detail_{data['user_id']}_{0}")
    builder.adjust(2)

    try:
        await message.answer(detail_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 662 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        if "message is not modified" not in str(e):
            raise


async def show_list_services(message: Message | CallbackQuery, page: int, state: FSMContext):
    if isinstance(message, CallbackQuery):
        send_fn = message.message.edit_text
    else:
        send_fn = message.answer

    query = """
        SELECT
        id, 
        name,
        price,
        duration,
        sex
        FROM services
        ORDER BY id
        LIMIT 6 OFFSET :offset
    """

    params = {"offset": page * 5}

    result = await db_connector.execute_query(query, params)
    rows = result.mappings().all()
    services = [dict(r) for r in rows[:5]]
    await state.update_data(full_data_serv = services)
    has_next_page = len(rows) > 5

    if not services:
        await send_fn("–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    builder = InlineKeyboardBuilder()
    for service in services:
        name = service['name'].split("_")
        label = f"{name[-1] if len(name) == 1 else name[-2] + ' - ' + name[-1]}"
        
        builder.button(text=label, callback_data=f"apanel_service_detail_{int(service['id'])}_{page}")
        print(">>>", service['id'], type(service['id']), page, type(page))
        print("callback_data:", f"apanel_service_detail_{service['id']}_{page}")

        

    if has_next_page:
        builder.button(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"apanel_service_page_{page+1}")
    if page > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"apanel_service_page_{page-1}")

    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="apanel_service_add")

    
    builder.adjust(1)

    await send_fn("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:", reply_markup=builder.as_markup())


@apanel_router.message(F.text == "–£—Å–ª—É–≥–∏")
async def edit_employee_start_time(message: Message, state: FSMContext):
    await show_list_services(message, 0, state)

@apanel_router.callback_query(F.data.startswith("apanel_service_page_"))
async def paginate_emp(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[-1])
    await show_list_services(callback, page, state)


async def show_service_detail(service_id: int, page: int, send_fn, state: FSMContext):
    data = await state.get_data()
    all_services = data.get("full_data_serv", [])
    service_data = next((s for s in all_services if s["id"] == service_id), None)

    if not service_data:
        await send_fn("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    sex = "–î–ª—è –≤—Å–µ—Ö"
    if service_data['sex'] == 2:
        sex = "–ú—É–∂—Å–∫–æ–π"
    else:
        sex = "–ñ–µ–Ω—Å–∫–∏–π"
    h, m = divmod(service_data['duration'], 60)
    duration = f"{f'{h} —á ' if h else ''}{m} –º–∏–Ω" if m or h == 0 else f"{h} —á"
    detail_text = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: {service_data['name']}\n\n"
        f"–¶–µ–Ω–∞ —É—Å—É–ª–≥–∏: {service_data['price']} —Ä—É–±.\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {duration}–º–∏–Ω\n\n"
        f"–ü–æ–ª: {sex}"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"apanel_service_edit_name_{service_data['id']}")
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"apanel_service_edit_price_{service_data['id']}")
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data=f"apanel_service_edit_duration_{service_data['id']}")
    builder.button(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª —É—Å–ª—É–≥–∏", callback_data=f"apanel_service_edit_sex_{service_data['id']}")
    builder.button(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É",
        callback_data=f"apanel_service_delete_{service_data['id']}_{page}"
    )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data=f"apanel_service_page_{page}")
    builder.adjust(2)

    await send_fn(detail_text, reply_markup=builder.as_markup())


async def update_service_in_state(state: FSMContext, service_id: int, **kwargs):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏ –≤ state –ø–æ –µ—ë id.
    kwargs ‚Äî —ç—Ç–æ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä name="–ù–æ–≤–æ–µ –∏–º—è"
    """
    data = await state.get_data()
    services = data.get("full_data_serv", [])

    for service in services:
        if service["id"] == service_id:
            service.update(kwargs)  # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            break

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    await state.update_data(full_data_serv=services)

@apanel_router.callback_query(F.data.startswith("apanel_service_detail_"))
async def service_detail_callback(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    service_id = int(parts[3])
    page = int(parts[4])
    await show_service_detail(service_id, page, callback.message.edit_text, state)

@apanel_router.callback_query(F.data.startswith("apanel_service_delete_"))
async def delete_employee(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    service_id = parts[3]
    page = int(parts[4])
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ",
        callback_data=f"apanel_complete_service_delete_{service_id}_{page}"
    )
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ",
        callback_data=f"apanel_service_detail_{service_id}_{page}"
    )
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É?", 
        reply_markup=builder.as_markup()
    )

@apanel_router.callback_query(F.data.startswith("apanel_complete_service_delete_"))
async def complete_delete(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    service_id = int(parts[4])
    page = int(parts[5])
    try:
        query = "DELETE FROM services WHERE id = :id"
        await db_connector.execute_query(query, {"id": service_id})
    except DetailedAiogramError as e:
        # –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        await send_long_message(f"Excpetion admin_panel.py 820 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        await callback.message.edit_text("‚ùå –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
        return
    await callback.message.edit_text("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    await show_list_services(callback, page, state)


@apanel_router.callback_query(F.data.startswith("apanel_service_edit_name_"))
async def edit_name(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("_")[-1])
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–ª—É–≥–∏.")
    await state.update_data(sname_edit_old=service_id)
    await state.set_state(Admin_Panel.sname_edit_old)


@apanel_router.message(Admin_Panel.sname_edit_old)
async def paginate_emp(message: Message, state: FSMContext):
    input_text = str(message.text.strip())
    info =  await state.get_data()
    id = info.get("sname_edit_old")

    try:
        query = "UPDATE services SET name = :name WHERE id = :id"
        await db_connector.execute_query(query, {"name": input_text, "id": int(id)})
        await update_service_in_state(state, id, name=input_text)
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 846 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        await message.answer("‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ë–î!")
        return
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–æ.")

    await show_service_detail(id, 0, message.answer, state)


@apanel_router.callback_query(F.data.startswith("apanel_service_edit_price_"))
async def edit_price(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("_")[-1])
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —É—Å–ª—É–≥–∏.")
    await state.update_data(sprice_edit_old=service_id)
    await state.set_state(Admin_Panel.sprice_edit_old)


@apanel_router.message(Admin_Panel.sprice_edit_old)
async def paginate_emp(message: Message, state: FSMContext):
    input_text = int(message.text.strip())
    info =  await state.get_data()
    id = info.get("sprice_edit_old")

    try:
        query = "UPDATE services SET price = :price WHERE id = :id"
        await db_connector.execute_query(query, {"price": input_text, "id": int(id)})
        await update_service_in_state(state, id, price=input_text)
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 873 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        await message.answer("‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ë–î!")
        return
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ —É—Å–ª—É–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∞.")

    await show_service_detail(id, 0, message.answer, state)


@apanel_router.callback_query(F.data.startswith("apanel_service_edit_duration_"))
async def edit_duration(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("_")[-1])
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏.")
    await state.update_data(sduration_edit_old=service_id)
    await state.set_state(Admin_Panel.sduration_edit_old)


@apanel_router.message(Admin_Panel.sduration_edit_old)
async def paginate_emp(message: Message, state: FSMContext):
    input_text = int(message.text.strip())
    info =  await state.get_data()
    id = info.get("sduration_edit_old")

    try:
        query = "UPDATE services SET duration = :duration WHERE id = :id"
        await db_connector.execute_query(query, {"duration": input_text, "id": int(id)})
        await update_service_in_state(state, id, duration=input_text)
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 900 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        await message.answer("‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ë–î!")
        return
    await message.answer(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∞.")

    await show_service_detail(id, 0, message.answer, state)


@apanel_router.callback_query(F.data.startswith("apanel_service_edit_sex_"))
async def edit_sex(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("_")[-1])
    builder = InlineKeyboardBuilder()
    builder.button(text="–ú—É–∂—Å–∫–æ–π", callback_data=f"apanel_edit_sex_{2}")
    builder.button(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data=f"apanel_edit_sex_{3}")
    builder.button(text="–û–±—â–∏–π", callback_data=f"apanel_edit_sex_{1}")
    builder.adjust(2)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª –¥–ª—è —É—Å–ª—É–≥–∏", reply_markup=builder.as_markup())
    await state.update_data(ssex_edit_old=service_id)


@apanel_router.callback_query(F.data.startswith("apanel_edit_sex_"))
async def confirm_edit_sex(callback: CallbackQuery, state: FSMContext):
    sex = int(callback.data.split("_")[-1])
    info = await state.get_data()
    service_id = info.get("ssex_edit_old")
    try:
        query = "UPDATE services SET sex = :sex WHERE id = :id"
        await db_connector.execute_query(query, {"sex": sex, "id": service_id})
        await update_service_in_state(state, service_id, sex=sex)
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 930 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∞ —É—Å–ª—É–≥–∏.")
        return
    await callback.message.answer("‚úÖ –ü–æ–ª —É—Å–ª—É–≥–∏ –∏–∑–º–µ–Ω—ë–Ω.")
    await show_service_detail(service_id, 0, callback.message.answer, state)


@apanel_router.callback_query(F.data == "apanel_service_add")
async def add_services(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏.")
    await state.set_state(Admin_Panel.sname_add)

@apanel_router.message(Admin_Panel.sname_add)
async def collect_name_serv(message: Message, state: FSMContext):
    input_text = message.text.strip()
    if len(input_text) < 50:
        await state.update_data(sname_add = input_text)
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–µ 50 —Å–∏–º–≤–æ–ª–æ–≤")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –Ω–æ–≤–æ–π —É—Å—É–ª–≥–∏. –ü—Ä–∏–º–µ—Ä: 400")
    await state.set_state(Admin_Panel.sprice_add)

@apanel_router.message(Admin_Panel.sprice_add)
async def collect_price_serv(message: Message, state: FSMContext):
    input_text = message.text.strip()
    if int(input_text) > 0:
        await state.update_data(sprice_add = input_text)
    else:
        message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–∏–º–µ—Ä: 400.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è –Ω–æ–≤–æ–π —É—Å—É–ª–≥–∏.")
    await state.set_state(Admin_Panel.sduration_add)

@apanel_router.message(Admin_Panel.sduration_add)
async def collect_duration_serv(message: Message, state: FSMContext):
    input_text = message.text.strip()
    if int(input_text) > 0:
        await state.update_data(sduration_add = input_text)
    else:
        message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–∏–º–µ—Ä: 30.")
    builder = InlineKeyboardBuilder()
    builder.button(text="–ú—É–∂—Å–∫–æ–π", callback_data=f"add_sex_{2}")
    builder.button(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data=f"add_sex_{3}")
    builder.button(text="–û–±—â–∏–π", callback_data=f"add_sex_{1}")
    builder.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏", reply_markup=builder.as_markup())

@apanel_router.callback_query(F.data.startswith("add_sex_"))
async def confirm_add_serv(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    data = await state.get_data()
    name = data.get("sname_add")
    price = int(data.get("sprice_add"))
    duration = int(data.get("sduration_add"))
    sex = int(parts[2])
    print(f"–ø–æ–ª –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {sex}")
    output_sex = "–û–±—â–∏–π"

    await state.update_data({
        "data_full_add":{
            'name': name,
            'price': price,
            'duration': duration,
            'sex': sex
        }
    })
    if sex == 2:
        output_sex = "M—É–∂—Å–∫–æ–π"
    elif sex == 3:
        output_sex = "–ñ–µ–Ω—Å–∫–∏–π"

    detail_text = (
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–µ\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n\n"
        f"–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏: {price}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {duration}\n\n"
        f"–ü–æ–ª —É—Å–ª—É–≥–∏: {output_sex}"
    )
    bulider = InlineKeyboardBuilder()
    bulider.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="apanel_confirm_add_serv")
    bulider.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="apanel_—Åancel_add_serv")
    await callback.message.answer(text=detail_text, reply_markup=bulider.as_markup())

@apanel_router.callback_query(F.data == "apanel_—Åancel_add_serv")
async def canceling_add_serv(callback: CallbackQuery, state: FSMContext):
    callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_list_services(callback, 0, state)

@apanel_router.callback_query(F.data == "apanel_confirm_add_serv")
async def canceling_add_serv(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    service = data.get("data_full_add")
    query = "INSERT INTO services (name, price, duration, sex) VALUES (:name, :price, :duration, :sex)"
    try:
        await db_connector.execute_query(query, {"name": service["name"], "price": service["price"], "duration": service["duration"], "sex": service["sex"]})
    except DetailedAiogramError as e:
        await callback.message.edit_text("‚ùå –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await send_long_message(f"Excpetion admin_panel.py 1026 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        return
    await callback.message.edit_text("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
    await show_list_services(callback, 0, state)


async def show_review(message: Message, state: FSMContext):
    try:
        query = "SELECT r.id, r.id_chat, r.id_message, r.datetime, u.name FROM reviews r JOIN users u ON u.id = r.id_chat WHERE check_in = 'false' LIMIT 1"
        request = await db_connector.execute_query(query)
        result = request.fetchone()
    except DetailedAiogramError as e:
        await message.answer(text="‚ùå –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
        await send_long_message(f"Excpetion admin_panel.py 1039 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        return
    
    if not result:
        await message.answer(text="‚úÖ–û—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ç.")
        return
    await state.update_data(rname = result.name, rdata = result.datetime)
    await message.answer(f"üìÖ –î–∞—Ç–∞: {result.datetime.strftime('%d.%m.%Y')}\n"
                        f"üïí –í—Ä–µ–º—è: {result.datetime.strftime('%H:%M')}\n\n"
                        f"üíá‚Äç‚ôÇÔ∏è <a href='tg://user?id={result.id_chat}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>",
                        parse_mode="HTML")
    
    await bot.forward_message(
        chat_id=message.chat.id,
        from_chat_id=result.id_chat,
        message_id=result.id_message
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤.", callback_data=f"review_publish_{result.id}_{result.id_chat}_{result.id_message}")
    builder.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤.", callback_data=f"review_delete_{result.id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", callback_data=f"review_close")
    builder.adjust(2)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup())
        

@apanel_router.message(F.text == "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤")
async def check_review(message: Message, state: FSMContext):
    await show_review(message, state)

@apanel_router.callback_query(F.data.startswith("review_publish_"))
async def publish_review(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    review_id = parts[2]
    id_chat = parts[3]
    id_message = parts[4]
    data = await state.get_data()
    name = data.get("rname")
    date = data.get("rdata")
    try:
        query = "UPDATE reviews SET check_in = \'true\' WHERE id = :id"
        if await db_connector.execute_query(query, {"id": int(review_id)}):
            await callback.message.edit_text(text="‚úÖ –û—Ç–∑—ã–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
            await bot.send_message(chat_id=-4937110209, text=f"üìã –û—Ç–∑—ã–≤ –æ—Ç –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ {name.capitalize()}.\n\nüìÖ –î–∞—Ç–∞: {date.strftime('%d.%m.%Y')}")
            await bot.forward_message(chat_id=-4937110209, from_chat_id=id_chat, message_id=id_message)
            return await show_review(callback.message, state)
    except DetailedAiogramError as e:
        await send_long_message(f"Excpetion admin_panel.py 1085 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        await callback.message.edit_text(text="‚ùå –ü—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.")

@apanel_router.callback_query(F.data.startswith("review_delete_"))
async def publish_review(callback: CallbackQuery):
    parts = callback.data.split("_")
    review_id = parts[2]
    try:
        query = "DELETE FROM reviews WHERE id = :id"
        if await db_connector.execute_query(query, {"id": int(review_id)}):
            await callback.message.edit_text(text="‚úÖ –û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω.")
            return await show_review(callback.message)
    except DetailedAiogramError as e: 
        await callback.message.edit_text(text="‚ùå –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.")
        await send_long_message(f"Excpetion admin_panel.py 1099 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 

@apanel_router.callback_query(F.data.startswith("review_close"))
async def publish_review(callback: CallbackQuery):
    await callback.message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n", reply_markup=admin_kb(callback.from_user.id))