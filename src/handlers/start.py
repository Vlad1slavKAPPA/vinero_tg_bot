from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from keyboards.all_kb import main_kb
from create_bot import db_connector,bot
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from messaging_exception.messaging import send_long_message

# –°–æ—Å—Ç–æ—è–Ω–∏—è: –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
class Form(StatesGroup):
    name = State()
    phone = State()
    gender = State()
    url_tg = State()

start_router = Router()

user_name = None


@start_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    query = "SELECT id, name FROM users WHERE id = :id"
    params = {"id": message.from_user.id}

    try:
        result = await db_connector.execute_query(query, params)
        rows = result.fetchall()

        if not rows:
            # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î
            await state.clear()
            await message.answer("–í—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ! –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
            await state.set_state(Form.name)
        else:
            user_name = rows[0].name
            await message.answer(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name.capitalize()}!\n"
                "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—É–¥–∏—è –∫—Ä–∞—Å–æ—Ç—ã Barbero!\n"
                "–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=main_kb(message.from_user.id),
                parse_mode=ParseMode.HTML
            )

    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await send_long_message(f"Excpetion start.py 51 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")


@start_router.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.update_data(url_tg=message.from_user.full_name)
    await state.set_state(Form.gender)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
            InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female"),
        ]
    ])

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=keyboard)

    
@start_router.callback_query(F.data.startswith("gender_"))
async def process_gender_callback(callback: types.CallbackQuery, state: FSMContext):
    gender = 2 if callback.data == "gender_male" else 3  # 2 ‚Äî –º—É–∂—Å–∫–æ–π, 3 ‚Äî –∂–µ–Ω—Å–∫–∏–π
    await state.update_data(gender=gender)
    await state.set_state(Form.phone)

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É:", reply_markup=keyboard)
    await callback.answer()


@start_router.message(Form.phone, lambda msg: msg.contact is not None)
async def process_phone_button(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await save_user_and_finish(message, state)


@start_router.message(Form.phone)
async def process_phone_manual(message: Message, state: FSMContext):
    phone = message.text.strip()
    if phone.startswith("+") and phone[1:].isdigit() and 10 <= len(phone) <= 15:
        await state.update_data(phone=phone)
        await save_user_and_finish(message, state)
    else:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79528125252")


async def save_user_and_finish(message: Message, state: FSMContext):
    user_data = await state.get_data()
    await state.clear()

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {user_data['name'].capitalize()}!\n"
        f"üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone']}\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode=ParseMode.HTML
    )
    phone_clean = user_data['phone'].lstrip('+')  # —É–±–∏—Ä–∞–µ–º –ø–ª—é—Å –≤ –Ω–∞—á–∞–ª–µ
    # –ó–∞–ø—Ä–æ—Å –≤ –ë–î
    query = "INSERT INTO users (id, name, phone, gender) VALUES (:id, :name, :phone, :gender)"
    params = {
        "id": message.from_user.id,
        "name": user_data['name'],
        "phone": phone_clean,
        "gender": user_data['gender'],
    }

    await message.answer(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_data['name']}!\n"
                "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—É–¥–∏—è –∫—Ä–∞—Å–æ—Ç—ã Barbero!\n"
                "–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=main_kb(message.from_user.id),
                parse_mode=ParseMode.HTML
            )
    try:
        await db_connector.execute_query(query, params)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await send_long_message(f"Excpetion start.py 139 line {datetime.now().strftime('%d %B %Y, %H:%M:%S')}\n\n{e}") 